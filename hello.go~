package main

import (
	"fmt"
)

func main() {
	// variables using var
	var i int
	i = 1
	fmt.Println(i)
	// -----  variables using :=
	j := 2
	fmt.Println(j)
	// ----
	var k int = 3
	fmt.Println(k)

	// string
	var s string
	s = "one"
	fmt.Println(s)

	t := "two"
	fmt.Println(t)

	// string manipulations
	var str1 string
	str1 = "string 1"
	fmt.Println(str1)

	str2 := "string 2"
	fmt.Println(str2)

	for i := 0; i < len(str2); i++ {
		fmt.Printf("%c", str2[i])
	}
	fmt.Println()

	// pointer with var
	var l int = 4
	var m *int
	m = &l
	fmt.Println(*m)

	// ---- pointer w/o var

	n := 5
	o := &n
	fmt.Println(*o)

	// array are value types
	var strArr [3]int
	strArr[0] = 1
	strArr[1] = 2
	strArr[2] = 3
	fmt.Println(strArr)

	// ---- init using array literal
	var strArr2 = [3]int{4, 5, 6}
	fmt.Println(strArr2)

	// --- array shorthand
	strArr3 := [3]int{7, 8, 9}
	fmt.Println(strArr3)

	// --- attempt to modify array works directly
	strArr3[0] = 77
	fmt.Println(strArr3)

	// but not when passing by value
	updateArraybyVal(strArr3, 777)
	fmt.Println(strArr3)

	// now update by ptr
	arr4 := updateArraybyPtr(&strArr3, 7777)
	fmt.Println(*arr4)

	// --- let golang infer array length
	strArr4 := [...]int{11, 22, 33}
	fmt.Println(strArr4)
	strArr4[2] = 44
	fmt.Println(strArr4)

	// ---
	strArrayRef := &strArr4
	strArrayRef[0] = 111
	fmt.Printf("%v\n", *strArrayRef)

	// slice
	strSlc := []int{44, 55, 66}
	fmt.Println(strSlc)

	strSlc[2] = 88 // --- attempt to modify slice works directly
	fmt.Println(strSlc)

	// slice mod works when since it's pass by ptr
	updateSliceByVal(strSlc, 888)
	fmt.Println(strSlc)

	// map
	// - create and init
	map1 := map[int]int{
		0: 1,
		1: 11,
		2: 111,
	}
	fmt.Println(map1)
	map1[3] = 1111
	fmt.Println(map1)

	// create no init
	map2 := make(map[int]int)
	map2[0] = 2
	map2[1] = 22
	map2[2] = 222
	fmt.Println(map2)
	map2[3] = 2222
	fmt.Println(map2)

	// copy map and update new map index, should update first map index
	map3 := map2
	map3[0] = 3333
	fmt.Println(map2)

	int1 := nickInt1{11111}
	fmt.Println(int1)

	// struct pointer to update original struct
	int2 := &int1
	int2.i = 22222
	fmt.Println(int1)
	// or
	fmt.Println(*int2)

	// struct method using value receiver should not update int1
	int1.incIntByValue(33333)
	fmt.Println(int1)
	// or
	fmt.Println(*int2)

	// struct method using value receiver should update int1
	int2.incIntByPtr(33333)
	fmt.Println(int1)
	// or
	fmt.Println(*int2)

	// iterate using range
	daysOfWeek := [7]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}

	for index, value := range daysOfWeek {
		fmt.Printf("%d[%s]\n", index, value)
	}
}

// struct
type nickInt1 struct {
	i int
}

// struct methods using value receiver
func (n nickInt1) incIntByValue(vall int) {
	n.i = vall
}

// struct methods using pointer receiver
func (n *nickInt1) incIntByPtr(vall int) {
	n.i = vall
}

func updateArraybyVal(in [3]int, val int) [3]int {
	in[0] = val
	return in
}

func updateArraybyPtr(in *[3]int, val int) *[3]int {
	in[0] = val
	return in
}

func updateSliceByVal(in []int, val int) []int {
	in[0] = val
	return in
}
