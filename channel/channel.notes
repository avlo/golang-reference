from: https://golangbot.com/channels/

CRITICAL POITNS: 
	- reading/writing UNBUFFERED channel in SAME thread WILL cause deadlock.
	- reading/writing UNBUFFERED channel in EXTERNAL thread WILLNOT cause deadlock (but main() may finish before external threads are done)
	- reading/writing BUFFERED channel in SAME thread WILLNOT cause deadlock

	it seems like UNBUFFERED channels SHOULD be used with external goroutines, confirm this

waitGroup used to prevent main thread from existing while other threads still exist

buffered channels are (also called) synchronous

BLOCKING
Sends and receives to a channel are blocking by default.  What does this mean? 

When a data is sent to a channel, the control is blocked in the send statement until some other Goroutine reads from that channel. 

Similarly when data is read from a channel, the read is blocked until some Goroutine writes data to that channel.

This property of channels is what helps Goroutines communicate effectively without the use of explicit locks or conditional variables that are quite common in other programming languages.


DEADLOCK 
One important factor to consider while using channels is deadlock. 

If a Goroutine is sending data on a channel, then it is expected that some other Goroutine should be receiving the data. If this does not happen, then the program will panic at runtime with Deadlock.

Similarly if a Goroutine is waiting to receive data from a channel, then some other Goroutine is expected to write data on that channel, else the program will panic.

~~~~~

another great reference: 
  https://guzalexander.com/2013/12/06/golang-channels-tutorial.html
  https://go101.org/article/channel-use-cases.html

~~~~~
experiment with:
	channels inside main w/o goroutines
	goroutines w/o channels

	unbuffered channel in main w/o goroutines
	buffered channel in main w/o goroutines

	unbuffered channel w goroutines
	buffered channel w goroutines

	semaphore

