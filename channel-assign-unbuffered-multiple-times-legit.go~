// channel-assign-unbuffered-multiple-times-legit.go
package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	started := time.Now()
	foods := []string{"pizza", "pasta", "kebap"}
	var wg sync.WaitGroup
	wg.Add(len(foods))

	// unbuffered channels
	// 1. you don't declare a size for the channel (the size is zero)
	// 2.  the sender will block until there si a receiver ready on the other side of the channel

	ch := make(chan string) // unbuffered channel
	go func(ch chan string) {
		m := <-ch
		fmt.Println("received ", m)
	}(ch)
	ch <- "hello" // deadlocks - there is no toehr goroutine receiving

	for _, f := range foods {
		go func(f string) {
			cook(f)
			wg.Done()
		}(f)
	}
	wg.Wait()
	fmt.Printf("done in %v\n", time.Since(started))
}

func cook(food string) {
	fmt.Printf("cooking %s...\n", food)
	time.Sleep(2 * time.Second)
	fmt.Printf("done cooking %s\n", food)

}
